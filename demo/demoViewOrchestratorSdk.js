import { ViewOrchestratorSdk } from 'view-sdk';

const orchestrator = new ViewOrchestratorSdk(
  '00000000-0000-0000-0000-000000000000', //tenant Id
  'default', //access token
  'http://localhost:8000/' //endpoint
);

const deleteDataFlow = async () => {
  try {
    const response = await orchestrator.deleteDataFlow('92281899-6e74-4b16-b640-9b88042e5e47');
    console.log('Data flow deleted:', response);
  } catch (err) {
    console.log('Error deleting data flow:', err);
  }
};

deleteDataFlow();
const dataFlowExists = async () => {
  try {
    const response = await orchestrator.existsDataFlow('92281899-6e74-4b16-b640-9b88042e5e47');
    console.log('Data flow exists:', response);
  } catch (err) {
    console.log('Error checking data flow existence:', err);
  }
};

// dataFlowExists();

const retrieveAllDataFlows = async () => {
  try {
    const response = await orchestrator.retrieveDataFlows();
    console.log('Data flows:', response);
  } catch (err) {
    console.log('Error reading data flows:', err);
  }
};

// retrieveAllDataFlows();
const readDataFlowPerformanceData = async () => {
  try {
    const response = await orchestrator.retrieveDataFlowPerformanceData(
      '00000000-0000-0000-0000-000000000000',
      '00000000-0000-0000-0000-000000000000'
    );
    console.log('Data flow performance data:', response);
  } catch (err) {
    console.log('Error reading data flow performance data:', err);
  }
};
// readDataFlowPerformanceData();

const readDataFlowLogFile = async () => {
  try {
    const response = await orchestrator.retrieveDataFlowLogFile(
      '00000000-0000-0000-0000-000000000000',
      '00000000-0000-0000-0000-000000000000'
    );
    console.log('Data flow log file:', response);
  } catch (err) {
    console.log('Error reading data flow log file:', err);
  }
};
// readDataFlowLogFile();

const readDataFlowLogs = async () => {
  try {
    const response = await orchestrator.retrieveDataFlowLogs(
      '00000000-0000-0000-0000-000000000000',
      '00000000-0000-0000-0000-000000000000'
    );
    console.log('Data flow logs:', response);
  } catch (err) {
    console.log('Error reading data flow logs:', err);
  }
};

// readDataFlowLogs();

const readDataFlowWithSteps = async () => {
  try {
    const response = await orchestrator.retrieveDataFlowWithSteps('92281899-6e74-4b16-b640-9b88042e5e47');
    console.log('Data flow:', response);
  } catch (err) {
    console.log('Error reading data flow with steps:', err);
  }
};

// readDataFlowWithSteps();
const readDataFlow = async () => {
  try {
    const response = await orchestrator.retrieveDataFlow('92281899-6e74-4b16-b640-9b88042e5e47');
    console.log(response);
  } catch (err) {
    console.log('Error reading data flow:', err);
  }
};
// readDataFlow();
const createDataFlow = async () => {
  try {
    const response = await orchestrator.createDataFlow({
      TriggerGUID: '00000000-0000-0000-0000-000000000000',
      StepGUID: '00000000-0000-0000-0000-000000000000',
      Name: 'Another data flow',
      Notes: 'My notes',
      LogRetentionDays: 7,
      Map: {
        StepGUID: '00000000-0000-0000-0000-000000000000',
        Success: null,
        Failure: null,
        Exception: null,
      },
    });
    console.log(response);
  } catch (err) {
    console.log('Error creating data flow:', err);
  }
};
// createDataFlow();

const deleteStep = async () => {
  try {
    const response = await orchestrator.deleteStep('bf51db46-6b1c-45e0-81cb-f07c26ccdfa3');
    console.log(response);
  } catch (err) {
    console.log('Error deleting step:', err);
  }
};
// deleteStep();

const existsStep = async () => {
  try {
    const response = await orchestrator.existsStep('bf51db46-6b1c-45e0-81cb-f07c26ccdfa3');
    console.log(response);
  } catch (err) {
    console.log('Error exists step:', err);
  }
};
// existsStep();

const readSteps = async () => {
  try {
    const response = await orchestrator.retrieveSteps();
    console.log(response);
  } catch (err) {
    console.log('Error reading step:', err);
  }
};
// readSteps();

const retrieveStepsWithSubordinatesAndPackages = async () => {
  try {
    const response = await orchestrator.retrieveStepsWithSubordinatesAndPackages(
      'bf51db46-6b1c-45e0-81cb-f07c26ccdfa3'
    );
    console.log(response);
  } catch (err) {
    console.log('Error reading step:', err);
  }
};
// retrieveStepsWithSubordinatesAndPackages();

const readStep = async () => {
  try {
    const response = await orchestrator.retrieveStep('bf51db46-6b1c-45e0-81cb-f07c26ccdfa3');
    console.log(response);
  } catch (err) {
    console.log('Error reading step:', err);
  }
};
// readStep();

const createStep = async () => {
  try {
    const response = await orchestrator.createStep({
      Name: 'Another test step [Ash]',
      Runtime: 'Dotnet8',
      StepArchiveFilename: 'TestStep.zip',
      StepEntrypointFilename: 'LoopbackGetStep.dll',
      StepEntrypointType: 'LoopbackGetStep.LoopbackGetStep',
      MD5Hash: '900B50364A091B1D09A374EBD364F056',
      SHA1Hash: '1216C1DCD4E7A2A5A2F615F852AB886F2BB29202',
      SHA256Hash: '46403910F99FDE6F0581E66F70638AB961CBF13BA64D870E8816C84BAC05462F',
      DebugAssemblyLoad: false,
      DebugWrapperScript: false,
      DebugRequestData: false,
      DebugResponseData: false,
      ConsoleLogging: true,
      VirtualEnvironment: null,
      DependenciesFile: null,
      CreatedUtc: '2024-05-09T16:13:55.608668Z',
      Package:
        '',
    });
    console.log('Step created:', response);
  } catch (err) {
    console.log('Error creating step:', err);
  }
};

// createStep();

const deleteTrigger = async () => {
  try {
    const response = await orchestrator.deleteTrigger('7a58f1e8-172c-43cb-a433-0a7f8eed4bbf');
    console.log('Trigger deleted:', response);
  } catch (err) {
    console.log('Error deleting trigger:', err);
  }
};

// deleteTrigger();

const existTrigger = async () => {
  try {
    const response = await orchestrator.retrieveTrigger('7a58f1e8-172c-43cb-a433-0a7f8eed4bbf');
    console.log('Trigger exists:', response);
  } catch (err) {
    console.log('Error checking trigger:', err);
  }
};

// existTrigger();
const updateTrigger = async () => {
  try {
    const response = await orchestrator.updateTrigger({
      GUID: '7a58f1e8-172c-43cb-a433-0a7f8eed4bbf',
      TenantGUID: '00000000-0000-0000-0000-000000000000',
      Name: 'My second trigger [ASH UPDATED]',
      TriggerType: 'HTTP',
      HttpMethod: 'GET',
      HttpUrlPrefix: '/default2',
      Notes: undefined,
      CreatedUtc: '2025-04-21T11:30:52.176516Z',
    });
    console.log('Trigger updated:', response);
  } catch (err) {
    console.log('Error updating trigger:', err);
  }
};

// updateTrigger();
const readTriggers = async () => {
  try {
    const response = await orchestrator.retrieveTriggers();
    console.log('Triggers:', response);
  } catch (err) {
    console.log('Error reading triggers:', err);
  }
};

// readTriggers();
const readTrigger = async () => {
  try {
    const response = await orchestrator.retrieveTrigger('7a58f1e8-172c-43cb-a433-0a7f8eed4bbf');
    console.log('Trigger:', response);
  } catch (err) {
    console.log('Error reading trigger:', err);
  }
};

// readTrigger();

const createTrigger = async () => {
  try {
    const response = await orchestrator.createTrigger({
      TriggerType: 'HTTP',
      Name: 'My second trigger [ASH]',
      HttpMethod: 'GET',
      HttpUrlPrefix: '/default2',
    });
    console.log('Trigger created:', response);
  } catch (err) {
    console.log('Error creating trigger:', err);
  }
};

// createTrigger();
