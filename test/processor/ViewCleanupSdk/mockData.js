export const mockTenantId = 'default';
export const mockCollectionGuid = 'default'; // Same as collection GUID
export const mockPoolGuid = 'default'; // Same as collection GUID

export const mockTenant = {
  id: 1,
  GUID: 'default',
  ParentGUID: 'default',
  Name: 'Sample Tenant',
  Region: 'us-west-1',
  S3BaseDomain: 's3.sampledomain.com',
  RestBaseDomain: 'api.sampledomain.com',
  DefaultPoolGUID: 'pool-guid-456',
  Active: true,
  CreatedUtc: new Date().toISOString,
};

export const mockCollection = {
  id: 1001,
  GUID: 'default',
  TenantGUID: mockTenant.GUID,
  Name: 'Sample Collection',
  AllowOverwrites: true,
  AdditionalData: 'Some additional metadata',
  CreatedUtc: new Date().toISOString,
};

export const mockPool = {
  id: 2001,
  GUID: 'default',
  TenantGUID: mockTenant.GUID,
  EncryptionKeyGUID: 'encryption-key-guid-001',
  Name: 'Primary Storage Pool',
  Provider: 'AWS',
  WriteMode: 'Sequential',
  UseSsl: true,
  Endpoint: 'https://s3.amazonaws.com',
  AccessKey: 'mock-access-key',
  SecretKey: 'mock-secret-key',
  AwsRegion: 'us-west-1',
  AwsBucket: 'sample-bucket',
  AwsBaseDomain: 'amazonaws.com',
  AwsBaseUrl: 'https://sample-bucket.s3.amazonaws.com',
  DiskDirectory: '/mnt/storage',
  AzureAccount: 'sample-account',
  AzureContainer: 'sample-container',
  Compress: 'gzip',
  EnableReadCaching: false,
  CreatedUtc: new Date().toISOString,
};

export const mockBucket = {
  id: 3001,
  GUID: 'default',
  TenantGUID: mockTenant.GUID,
  PoolGUID: mockPool.GUID,
  OwnerGUID: 'owner-guid-998',
  Category: 'General',
  Name: 'Sample Bucket',
  RegionString: 'us-west-1',
  Versioning: true,
  RetentionMinutes: null,
  MaxUploadSize: null,
  MaxMultipartUploadSeconds: 604800, // 7 days
  LastAccessUtc: new Date().toISOString,
  CreatedUtc: new Date().toISOString,
  Owner: {
    GUID: 'default',
    TenantGUID: mockTenant.GUID,
    FirstName: 'John',
    LastName: 'Doe',
    Notes: 'Sample owner for testing',
    Email: 'john.doe@example.com',
    PasswordSha256: 'hashed-password',
    Active: true,
    CreatedUtc: new Date().toISOString,
  },
};

export const mockObject = {
  guid: 'default',
  parentGUID: 'default',
  tenantGUID: mockTenant.GUID,
  tenantName: mockTenant.Name,
  nodeGUID: 'node-guid-777',
  poolGUID: mockPool.GUID,
  bucketGUID: mockBucket.GUID,
  bucketName: mockBucket.Name,
  ownerGUID: mockBucket.Owner.GUID,
  encryptionKeyGUID: 'encryption-key-guid-001',
  dataCatalogDocumentGUID: 'doc-guid-888',
  dataRepositoryGUID: 'repo-guid-333',
  graphRepositoryGUID: 'graph-guid-444',
  graphNodeIdentifier: 'node-id-666',
  dataFlowRequestGUID: 'flow-guid-111',
  key: 'sample-key',
  version: 'v1',
  isLatest: true,
  isDeleteMarker: false,
  isLocal: true,
  contentType: 'application/json',
  documentType: 'JSON',
  contentLength: 1024,
  sourceUrl: 'https://source-url.example.com',
  md5Hash: 'md5hashvalue',
  sha1Hash: 'sha1hashvalue',
  sha256Hash: 'sha256hashvalue',
  expirationUtc: null,
  lastAccessUtc: new Date().toISOString,
  lastModifiedUtc: new Date().toISOString,
  createdUtc: new Date().toISOString,
  data: Buffer.from('sample-data'),
};

export const mockMetadataRule = {
  GUID: 'default',
  TenantGUID: mockTenant.GUID,
  BucketGUID: mockBucket.GUID,
  OwnerGUID: mockBucket.Owner.GUID,
  Name: 'Metadata Rule 1',
  ContentType: 'text/plain',
  Prefix: '/prefix/',
  Suffix: '.txt',
  ProcessingEndpoint: 'http://localhost/process',
  CleanupEndpoint: 'http://localhost/cleanup',
  TypeDetectorEndpoint: 'http://localhost/type',
  SemanticCellEndpoint: 'http://localhost/semantic',
  MaxChunkContentLength: 512,
  ShiftSize: 512,
  UdrEndpoint: 'http://localhost/udr',
  DataCatalogType: 'Lexi',
  DataCatalogEndpoint: 'http://localhost/catalog',
  DataCatalogCollection: null,
  GraphRepositoryGUID: null,
  TopTerms: 25,
  CaseInsensitive: true,
  IncludeFlattened: true,
  TargetBucketGUID: null,
  MaxContentLength: 16777216,
  RetentionMinutes: null,
  CreatedUtc: new Date().toISOString,
};

export const mockEmbeddingsRule = {
  GUID: 'default',
  TenantGUID: mockTenant.GUID,
  BucketGUID: mockBucket.GUID,
  OwnerGUID: mockBucket.Owner.GUID,
  Name: 'Embeddings Rule 1',
  ContentType: 'text/plain',
  Prefix: '/prefix/',
  Suffix: '.txt',
  TargetBucketGUID: null,
  GraphRepositoryGUID: null,
  VectorRepositoryGUID: null,
  DataFlowEndpoint: 'http://localhost/flow',
  EmbeddingsGenerator: 'LCProxy',
  GeneratorUrl: 'http://localhost/generate',
  GeneratorApiKey: 'api-key',
  BatchSize: 16,
  MaxGeneratorTasks: 16,
  MaxRetries: 3,
  MaxFailures: 3,
  VectorStoreUrl: 'http://localhost/vector',
  MaxContentLength: 16777216,
  RetentionMinutes: null,
  CreatedUtc: new Date().toISOString,
};

export const mockVectorRepo = {
  GUID: 'default',
  TenantGUID: mockTenant.GUID,
  name: 'Sample Vector Repository',
  repositoryType: 'Default',
  endpointUrl: 'http://vector-repo.example.com',
  apiKey: 'vector-api-key',
  model: 'all-MiniLM-L6-v2',
  dimensionality: 384,
  databaseHostname: 'localhost',
  databaseName: 'vector-db',
  databaseTable: 'vectors',
  databasePort: 5432,
  databaseUser: 'db-user',
  databasePassword: 'db-password',
  promptPrefix: 'prefix',
  promptSuffix: 'suffix',
  createdUtc: new Date().toISOString,
};

export const mockGraphRepo = {
  GUID: 'default',
  TenantGUID: mockTenant.GUID,
  Name: 'Sample Graph Repository',
  RepositoryType: 'Graph',
  EndpointUrl: 'http://graph-repo.example.com',
  ApiKey: 'graph-api-key',
  Username: 'graph-user',
  Password: 'graph-password',
  Hostname: 'localhost',
  Port: 7687,
  GraphIdentifier: 'graph-id',
  CreatedUtc: new Date().toISOString,
};

export const mockCleanupResponse = {
  dataFlowRequestGUID: 'default',
  success: true,
  timestamp: '2024-03-19T14:30:45.123Z',
  error: null,
};
